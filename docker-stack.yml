version: "3"
services:
  my-eureka1:
    ports:
      - "10101:10101"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: on-failure
    image: shuiniudocker/my-eureka:1.0

  my-eureka2:
    ports:
      - "10102:10101"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: on-failure
    image: shuiniudocker/my-eureka:1.0

  my-config:
    ports:
      - "10201"
    deploy:
      replicas: 2
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: on-failure
    image: shuiniudocker/my-config:1.0
    depends_on:
      - my-eureka1
      - my-eureka2

  my-zuul:
    ports:
      - "10302"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: on-failure
    image: shuiniudocker/my-zuul:1.0
    depends_on:
      - my-config

  my-xxl:
    ports:
      - "10310"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    image: shuiniudocker/my-xxl:1.0
    depends_on:
      - my-eureka1
      - my-eureka2

  activemq-provider:
    deploy:
      replicas: 2
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: on-failure
    image: shuiniudocker/activemq-provider:1.0
    depends_on:
      - my-config
      - my-xxl

  activemq-consumer:
    deploy:
      replicas: 2
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: on-failure
    image: shuiniudocker/activemq-consumer:1.0
    depends_on:
      - my-config

  portainer:
    image: portainer/portainer
    ports:
      - "9000:9000"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "9001:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  default:
    external:
      name: test-swarm
    
